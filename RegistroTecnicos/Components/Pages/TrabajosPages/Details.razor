@page "/Trabajos/Details"
@page "/Trabajos/Details/{TrabajoId:int}"
@inject TrabajosServices trabajosServices
@inject ClientesServices clientesServices
@inject TecnicosServices tecnicosServices
@inject PrioridadesServices prioridadesServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

@if (trabajo != null)
{
    <div class="container">
        <div class="card show-header">
            <div class="card-header bg-primary text-white text-center p-2 rounded">
                <h3 class="text-center"><strong>Detalles Trabajo</strong></h3>
            </div>

            <div class="container">
                <div class="row">
                    <div class="col-md-10">
                        <div class="card-body">
                            <ul class="list-unstyled">
                                <li><strong>TrabajoId:</strong>@trabajo.TrabajoId</li>
                                <li><strong>Fecha:</strong>@trabajo.Fecha</li>
                                <li><strong>ClienteId:</strong>@cliente.Nombres</li>
                                <li><strong>TecnicoId:</strong>@tecnico.Nombres</li>
                                <li><strong>PrioridadId:</strong>@prioridad.Descripcion</li>
                                <li><strong>Descripci&oacute;n:</strong>@trabajo.Descripcion</li>
                                <li><strong>Monto:</strong>@trabajo.Monto</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <button type="button" class="btn btn-outline-primary ml-2" @onclick="Volver"><span class="bi bi-box-arrow-left"></span>Volver</button>
            <button type="button" class="btn btn-outline-danger ml-2" @onclick="EnviarMensajeWhatsApp"><span class="bi bi-check-circle"></span>Finalizar</button>
        </div>
    </div>
}
else
{
    <p>Trabajos no encontrado.</p>
}
@code {
    [Parameter]
    public int TrabajoId { get; set; }
    public Trabajos? trabajo { get; set; } = new Trabajos();
    public Tecnicos? tecnico { get; set; } = new Tecnicos();
    public Clientes? cliente { get; set; } = new Clientes();
    public Prioridades? prioridad { get; set; } = new Prioridades();
    //Metodo onitialize
    protected override async Task OnInitializedAsync()
    {
        if(TrabajoId != 0)
        {
            trabajo = await trabajosServices.Buscar(TrabajoId);
            cliente = await clientesServices.Buscar(trabajo.ClienteId);
            tecnico = await tecnicosServices.Buscar(trabajo.TecnicoId);
            prioridad = await prioridadesServices.Buscar(trabajo.PrioridadId);
        }
    }
    // Método para obtener la URL de WhatsApp usando el número del cliente
    private string ObtenerUrlWhatsApp()
    {
        if (cliente?.WhatsApp != null)
        {
            // Generar el mensaje personalizado y escaparlo
            string mensaje = ObtenerMensajeFinalizar();
            string mensajeEscapado = Uri.EscapeDataString(mensaje);

            // Crear la URL de WhatsApp usando el número del cliente y el mensaje escapado
            string url = $"https://wa.me/{cliente.WhatsApp}?text={mensajeEscapado}";
            return url;
        }
        else
        {
            // Si no hay número de WhatsApp, devolver un enlace inválido
            return "#";
        }
    }
    // Método para generar el mensaje de finalización
    private string ObtenerMensajeFinalizar()
    {
        return $"El trabajo con ID {trabajo?.TrabajoId} para {cliente?.Nombres}     ya está finalizado.";
    }
    // Método para enviar el mensaje de WhatsApp
    private void EnviarMensajeWhatsApp()
    {
        string urlWhatsApp = ObtenerUrlWhatsApp();

        if (urlWhatsApp != "#")
        {
            navigationManager.NavigateTo(urlWhatsApp, true); // Navega a la URL de WhatsApp
        }
    }
    //Metodo Volver
    public async Task Volver()
    {
        navigationManager.NavigateTo("/Trabajos/Index");
    }
}
