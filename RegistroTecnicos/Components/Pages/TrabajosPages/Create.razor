@page "/Trabajos/Create"
@inject TrabajosServices trabajosServices
@inject ClientesServices clientesServices
@inject TecnicosServices tecnicosServices
@inject PrioridadesServices prioridadesServices
@inject ArticulosServices articulosServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<EditForm Model="trabajo" OnValidSubmit=" Guardar">
    <DataAnnotationsValidator />
    <div class="card-header bg-primary text-white text-center">
        <h5><strong>Registro Trabajos</strong></h5>
    </div>
    <div class="card-body">
        @*  TrabajoId *@
        <div class="mb-3">
            <label for="TrabajoId" class="form-label"><strong>TrabajoId:</strong></label>
            <InputNumber @bind-Value="trabajo.TrabajoId" class="form-control" />
        </div>
        @*  Fecha *@
        <div class="mb-3">
            <label for="Fecha" class="form-label"><strong>Fecha:</strong></label>
            <InputDate @bind-Value="trabajo.Fecha" class="form-control" />
            <ValidationMessage For="@(() => trabajo.Fecha)" />
        </div>
        @*  ClienteId *@
        <div class="mb-3">
            <label for="ClienteId" class="form-label"><strong>ClienteId:</strong></label>
            <InputSelect @bind-Value="trabajo.ClienteId" class="form-control">
                <option value="0">Selecionar un Cliente</option>
                @foreach (var cliente in clientes)
                {
                    <option value="@cliente.ClienteId">@cliente.Nombres</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => trabajo.ClienteId)" />
        </div>
        @*  TecnicoId *@
        <div class="mb-3">
            <label for="TecnicoId" class="form-label"><strong>TécnicoId:</strong></label>
            <InputSelect @bind-Value="trabajo.TecnicoId" class="form-control">
                <option value="0">Selecionar un Técnico</option>
                @foreach (var tecnico in tecnicos)
                {
                    <option value="@tecnico.TecnicoId">@tecnico.Nombres</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => trabajo.TecnicoId)" />
        </div>
        @* PrioridadId  *@
        <div class="mb-3">
            <label for="PrioridadId" class="form-label"><strong>PrioridadId:</strong></label>
            <InputSelect @bind-Value="trabajo.PrioridadId" class="form-control">
                <option value="0">Selecionar una Prioridad</option>
                @foreach (var prioridad in prioridades)
                {
                    <option value="@prioridad.PrioridadId">@prioridad.Descripcion</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => trabajo.PrioridadId)" />
        </div>
        @*  Descripcion  *@
        <div class="mb-3">
            <label for="Descripcion" class="form-label"><strong>Descripci&oacute;n:</strong></label>
            <InputText @bind-Value="trabajo.Descripcion" class="form-control" />
            <ValidationMessage For="@(() => trabajo.Descripcion)" />
        </div>
        @*  Monto  *@
        <div class="mb-3">
            <label for="Monto" class="form-label"><strong>Monto:</strong></label>
            <InputNumber @bind-Value="trabajo.Monto" class="form-control" Disabled />
            <ValidationMessage For="@(() => trabajo.Monto)" />
        </div>

        <div class="border border-success p-3 mt-3">
            <h5 class="card-header">Detalle de Trabajos</h5>
            <div class="card-body">
                <div class="row align-items-end m-0">
                    @* ArticuloId  *@
                    <div class="col-md-4 p-0">
                        <InputSelect class="form-control" @bind-Value="selectedArticuloId">
                            <option value="0" disabled>Selecionar un Artículo</option>
                            @foreach (var articulo in ListaArticulos)
                            {
                                <option value="@articulo.ArticuloId">@articulo.Descripcion - Precio: @articulo.Precio</option>
                            }
                        </InputSelect>
                    </div>
                    @*    Cantidad  *@
                    <div class="col-md-3 p-0">
                        <div class="input-group">
                            <span class="input-group-text">Cantidad:</span>
                            <InputNumber @bind-Value="TrabajosDetalle.Cantidad" class="form-control" />
                        </div>

                        <ValidationMessage For="@(() => TrabajosDetalle.Cantidad)" />
                    </div>
                    @*    Precio  *@
                    <div class="col-md-3 p-0">
                        <div class="input-group">
                            <span class="input-group-text">Precio:</span>
                            <InputNumber @bind-Value="TrabajosDetalle.Precio" class="form-control" Disabled />
                        </div>

                        <ValidationMessage For="@(() => TrabajosDetalle.Precio)" />
                    </div>
                    @* Botón Agregar  *@
                    <div class="col-md-2 p-0">
                        <button type="button" @onclick="AgregarDetalle" class="btn btn-outline-primary">
                            <span class="bi bi-plus mt-3"></span>
                            Agregar
                        </button>
                    </div>
                </div>

                <table class="table table-light table-bordered mt-3">
                    <thead class="table table-striped text-center">

                        <tr>
                            <th>ArtículoId</th>
                            <th>Cantidad</th>
                            <th>Precio</th>

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in ListaTrabajosDetalle)
                        {
                            var descripcionArticulo = ListaArticulos.FirstOrDefault(a => a.ArticuloId == detalle.ArticuloId)?.Descripcion ?? "No encontrado";
                            <tr>
                                <td>@descripcionArticulo</td>
                                <td>@detalle.Cantidad</td>
                                <td>@detalle.Precio</td>
                                <td>
                                    <button @onclick="() => EliminarDetalle(detalle)" class="btn btn-outline-dark">
                                        <span class="bi bi-trash mt-3"></span>
                                        Remover
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                @if (guardar)
                {
                    <div class="alert alert-success" role="alert">
                        Se guardaron los detalles del trabajo.
                    </div>
                }
                @if (agregar)
                {
                    <div class="alert alert-info" role="alert">
                        Ya se agrego en detalles del trabajo.
                    </div>
                }
                @if (eliminado)
                {
                    <div class="alert alert-danger" role="alert">
                        El detalle ha sido eliminado.
                    </div>
                }

                <div class="card-footer d-flex justify-content-center">
                    <button type="button" @onclick="Nuevo" class="btn btn-outline-secondary">
                        <span class="bi bi-plus mt-3"></span> Nuevo
                    </button>

                    <button type="submit" class="btn btn-outline-success">
                        <span class="bi bi-floppy mt-3"></span> Guardar
                    </button>
                    <button type="button" @onclick="Volver" class="btn btn-outline-primary">
                        <span class="bi bi-arrow-left mt-3"></span>
                        Volver
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>
@code {
    [Parameter]
    public int TrabajoId { get; set; }
    public Trabajos trabajo { get; set; } = new();
    public TrabajosDetalle TrabajosDetalle = new();
    public List<Tecnicos> tecnicos { get; set; } = new();
    public List<Clientes> clientes { get; set; } = new();
    public Articulos articulos { get; set; } = new Articulos();
    public List<Prioridades> prioridades { get; set; } = new();
    public List<Articulos> ListaArticulos { get; set; } = new();
    public List<TrabajosDetalle> ListaTrabajosDetalle { get; set; } = new();
    private int selectedArticuloId;
    private bool existe = false;
    private bool eliminado = false;
    private bool agregar = false;
    private bool guardar = false;

    protected override async Task OnInitializedAsync()
    {
        clientes = await clientesServices.Listar(t => true);
        tecnicos = await tecnicosServices.Listar(t => true);
        prioridades = await prioridadesServices.Listar(t => true);
        ListaArticulos = await articulosServices.ListarArticulos();
    }

    public async Task Nuevo()
    {
        trabajo = new Trabajos();
        TrabajosDetalle = new TrabajosDetalle();
        existe = false;
    }

    public async Task EliminarDetalle(TrabajosDetalle detalle)
    {
        selectedArticuloId = detalle.ArticuloId;
        TrabajosDetalle.Cantidad = detalle.Cantidad;
        TrabajosDetalle.Precio = detalle.Precio;

        ListaTrabajosDetalle.Remove(detalle);
        eliminado = true;
        CalcularTotal();
    }

    private async Task CalcularTotal()
    {
        trabajo.Monto = ListaTrabajosDetalle.Sum(d => d.Precio * d.Cantidad);
    }

    
    public async Task AgregarDetalle()
    {
        var articuloSeleccionado = ListaArticulos.FirstOrDefault(a => a.ArticuloId == selectedArticuloId);
        if (articuloSeleccionado != null && TrabajosDetalle.Cantidad > 0)
        {
            if (articuloSeleccionado.Existencia < TrabajosDetalle.Cantidad)
            {
               
                return;
            }

            TrabajosDetalle.Precio = articuloSeleccionado.Precio;

            var nuevoDetalle = new TrabajosDetalle
                {
                    ArticuloId = articuloSeleccionado.ArticuloId,
                    Cantidad = TrabajosDetalle.Cantidad,
                    Precio = articuloSeleccionado.Precio
                };

            ListaTrabajosDetalle.Add(nuevoDetalle);
            trabajo.Monto = ListaTrabajosDetalle.Sum(d => d.Precio * d.Cantidad);

            
            TrabajosDetalle = new TrabajosDetalle();
            CalcularTotal();
            agregar = true; 
        }
    }

    public async Task<bool> Validar()
    {
        existe = await trabajosServices.Existe(trabajo.TrabajoId);
        return !existe;
    }

    public async Task Buscar()
    {
        existe = false;
        var encontrado = await trabajosServices.Buscar(trabajo.TrabajoId);
        if (encontrado != null)
        {
            trabajo = encontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task Guardar()
    {
        
            foreach (var detalle in ListaTrabajosDetalle)
            {
                var articulo = await articulosServices.ObtenerArticuloPorId(detalle.ArticuloId);
                if (articulo == null || articulo.Existencia < detalle.Cantidad)
                {
                    
                    return;
                }
            }

            if (trabajo.TrabajoId == 0)
            {
               
                if (await trabajosServices.Existe(trabajo.TrabajoId))
                {
                   
                    return;
                }
            }

            foreach (var detalle in ListaTrabajosDetalle)
            {
                await articulosServices.ActualizarExistencia(detalle.ArticuloId, -detalle.Cantidad); 
            }

            trabajo.TrabajosDetalle = ListaTrabajosDetalle;
            var guardado = await trabajosServices.Guardar(trabajo);
            if (guardado)
            {
                guardar = true;
             
            }
       
    }

    public async Task Volver()
    {
        navigationManager.NavigateTo("/Trabajos/Index");
    }
}