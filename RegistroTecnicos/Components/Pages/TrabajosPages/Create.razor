@page "/Trabajos/Create"
@inject TrabajosServices trabajosServices
@inject ClientesServices clientesServices
@inject TecnicosServices tecnicosServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<EditForm Model="trabajo" OnValidSubmit="Guardar"> 
    <DataAnnotationsValidator/>
    <div class="card-header bg-primary text-white text-center p-2 rounded">
        <h3 style="font-weight: bold;" class="md-3 font-weight: bold;">Registro Trabajos</h3>
    </div>
    <div class="card-body">
      @*   TrabajoId *@
        <div class="row">
            <div class="col-md-10 mb-5">
                <label for="TrabajoId " class="form-label"><strong>TrabajoId :</strong></label>
                <div class="input-group">
                    <div style="width: 40%; height: 1mm">
                        <InputNumber @bind-Value="trabajo.TrabajoId" class="form-control" style="font-size: 0.8rem;"aria-describedby="botonbuscar"/>
                    </div>
                </div>
            </div>
        </div>
       @*  Fecha *@
       <div class="mb-5">
            <label for="Fecha " class="form-label"><strong>Fecha :</strong></label>
            <InputDate @bind-Value="trabajo.Fecha" class="form-control" />
             <ValidationMessage For="@(()=>trabajo.Fecha)"/>
       </div>
        @*  ClienteId *@
        <div class="mb-5">
            <label> <strong>ClienteId:</strong> </label>
            <InputSelect @bind-Value="trabajo.ClienteId" class="form-control">
                <option value="0">Elejir Un Cliente</option>
                @foreach (var clientes in cliente)
                {
                    <option value="@clientes.ClienteId">@clientes.Nombres</option>
                }
            </InputSelect>
            <ValidationMessage For="@(()=>trabajo.Descripcion)" />
        </div>
        @*  TecnicoId *@
        <div class="mb-5">
            <label> <strong>TecnicoId:</strong> </label>
            <InputSelect @bind-Value="trabajo.TecnicoId" class="form-control">
                <option value="0">Elejir Un Tecnico</option>
                @foreach (var tecnicos in tecnico)
                {
                    <option value="@tecnicos.TecnicoId">@tecnicos.Nombres</option>
                }
            </InputSelect>
            <ValidationMessage For="@(()=>trabajo.Descripcion)" />
        </div>
        @*  Descripcion*@
        <div class="mb-5">
            <label for="Descripcion" class="form-label"><strong>Descripcion :</strong></label>
            <InputText @bind-Value="trabajo.Descripcion" class="form-control" />
            <ValidationMessage For="@(()=>trabajo.Descripcion)" />
        </div>
        @*  Monto *@
        <div class="mb-5">
            <label for="Monto  " class="form-label"><strong>Monto  :</strong></label>
            <InputNumber @bind-Value="trabajo.Monto " class="form-control" />
            <ValidationMessage For="@(()=>trabajo.Monto )" />
        </div>
    </div>
    <div class="card-footer: align; d-flex justify-content-center">
        <div class="input-group">
            <button type="button" class="btn btn-outline-secondary ml-2"@onclick="Nuevo"><span class="bi bi-plus"></span>Nuevo</button>
            <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle"></span>Guardar</button>
            <button type="button" class="btn btn-outline-primary ml-2" @onclick="Volver"><span class="bi bi-box-arrow-left"></span>Volver</button>
        </div>
    </div>
</EditForm>
@code {
    [Parameter]
    public int TrabajoId{ get; set; }
    public Trabajos? trabajo { get; set; } = new Trabajos();
    public List<Tecnicos> tecnico { get; set; } = new List<Tecnicos>();
    public List<Clientes> cliente { get; set; } = new List<Clientes>();
    private bool existe = false;
    //Metodo onitialize
    protected override async Task OnInitializedAsync()
    {
        cliente = await clientesServices.Listar(t => true);
        tecnico = await tecnicosServices.Listar(t => true);
    }
    //Metodo Nuevo
    public async Task Nuevo()
    {
        trabajo = new Trabajos();
        existe = false;
    }
    //Metodo Buscar
    public async Task Buscar()
    {
        existe = false;
        var encontrado = await trabajosServices.Buscar(trabajo.TrabajoId);
        if(encontrado != null)
        {
            trabajo = encontrado;
        }
        else
        {
            Nuevo();
        }
    }
    //Metodo Validar
    public async Task<bool> validar()
    {
        existe = await trabajosServices.Existe(TrabajoId);
        return !existe;
    }
    //Metodo Guardar
    public async Task Guardar()
    {
        if(!await validar())
        {
            return;
        }
        var guardado = await trabajosServices.Guardar(trabajo);
        if (guardado)
        {
            Nuevo();
        }
    }
    //Metodo Volver
    public async Task Volver()
    {
        navigationManager.NavigateTo("/Trabajos/Index");
    }
}
